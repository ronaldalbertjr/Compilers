Conflict in state 27 between rule 11 and token '+' resolved as shift.
Conflict in state 27 between rule 11 and token '-' resolved as shift.
Conflict in state 27 between rule 11 and token '*' resolved as shift.
Conflict in state 27 between rule 11 and token '/' resolved as shift.
Conflict in state 36 between rule 12 and token '+' resolved as shift.
Conflict in state 36 between rule 12 and token '-' resolved as shift.
Conflict in state 36 between rule 12 and token '*' resolved as shift.
Conflict in state 36 between rule 12 and token '/' resolved as shift.
Conflict in state 38 between rule 13 and token '+' resolved as reduce.
Conflict in state 38 between rule 13 and token '-' resolved as reduce.
Conflict in state 38 between rule 13 and token '*' resolved as shift.
Conflict in state 38 between rule 13 and token '/' resolved as shift.
Conflict in state 39 between rule 14 and token '+' resolved as reduce.
Conflict in state 39 between rule 14 and token '-' resolved as reduce.
Conflict in state 39 between rule 14 and token '*' resolved as shift.
Conflict in state 39 between rule 14 and token '/' resolved as shift.
Conflict in state 40 between rule 15 and token '+' resolved as reduce.
Conflict in state 40 between rule 15 and token '-' resolved as reduce.
Conflict in state 40 between rule 15 and token '*' resolved as reduce.
Conflict in state 40 between rule 15 and token '/' resolved as reduce.
Conflict in state 41 between rule 16 and token '+' resolved as reduce.
Conflict in state 41 between rule 16 and token '-' resolved as reduce.
Conflict in state 41 between rule 16 and token '*' resolved as reduce.
Conflict in state 41 between rule 16 and token '/' resolved as reduce.
Conflict in state 46 between rule 6 and token ',' resolved as reduce.

Grammar
rule 1    @1 ->		/* empty */
rule 2    CMDs -> A @1 ';' CMDs
rule 3    CMDs ->		/* empty */
rule 4    L_VALUE_PROP -> ID '[' E ']'
rule 5    L_VALUE_PROP -> ID '.' ID
rule 6    LET_LVALUE -> LET_LVALUE ',' LET_LVALUE
rule 7    LET_LVALUE -> ID '=' E
rule 8    LET_LVALUE -> ID
rule 9    A -> LET LET_LVALUE
rule 10   A -> E
rule 11   E -> ID '=' E
rule 12   E -> L_VALUE_PROP '=' E
rule 13   E -> E '+' E
rule 14   E -> E '-' E
rule 15   E -> E '*' E
rule 16   E -> E '/' E
rule 17   E -> F
rule 18   F -> ID
rule 19   F -> L_VALUE_PROP
rule 20   F -> NUM
rule 21   F -> STR
rule 22   F -> '(' E ')'
rule 23   F -> ID '(' PARAM ')'
rule 24   F -> '{' '}'
rule 25   F -> '[' ']'
rule 26   PARAM -> ARGs
rule 27   PARAM ->		/* empty */
rule 28   ARGs -> E ',' ARGs
rule 29   ARGs -> E

Terminals, with rules where they appear

$ (-1)
'(' (40) 22 23
')' (41) 22 23
'*' (42) 15
'+' (43) 13
',' (44) 6 28
'-' (45) 14
'.' (46) 5
'/' (47) 16
';' (59) 2
'=' (61) 7 11 12
'[' (91) 4 25
']' (93) 4 25
'{' (123) 24
'}' (125) 24
error (256)
NUM (258) 20
STR (259) 21
ID (260) 4 5 7 8 11 18 23
LET (261) 9

Nonterminals, with rules where they appear

CMDs (21)
    on left: 2 3, on right: 2
@1 (22)
    on left: 1, on right: 2
L_VALUE_PROP (23)
    on left: 4 5, on right: 12 19
LET_LVALUE (24)
    on left: 6 7 8, on right: 6 9
A (25)
    on left: 9 10, on right: 2
E (26)
    on left: 11 12 13 14 15 16 17, on right: 4 7 10 11 12 13 14 15
    16 22 28 29
F (27)
    on left: 18 19 20 21 22 23 24 25, on right: 17
PARAM (28)
    on left: 26 27, on right: 23
ARGs (29)
    on left: 28 29, on right: 26 28


state 0

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    LET 	shift, and go to state 4
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 49
    L_VALUE_PROP	go to state 8
    A   	go to state 9
    E   	go to state 10
    F   	go to state 11



state 1

    F  ->  NUM .   (rule 20)

    $default	reduce using rule 20 (F)



state 2

    F  ->  STR .   (rule 21)

    $default	reduce using rule 21 (F)



state 3

    L_VALUE_PROP  ->  ID . '[' E ']'   (rule 4)
    L_VALUE_PROP  ->  ID . '.' ID   (rule 5)
    E  ->  ID . '=' E   (rule 11)
    F  ->  ID .   (rule 18)
    F  ->  ID . '(' PARAM ')'   (rule 23)

    '=' 	shift, and go to state 12
    '[' 	shift, and go to state 13
    '.' 	shift, and go to state 14
    '(' 	shift, and go to state 15

    $default	reduce using rule 18 (F)



state 4

    A  ->  LET . LET_LVALUE   (rule 9)

    ID  	shift, and go to state 16

    LET_LVALUE	go to state 17



state 5

    F  ->  '[' . ']'   (rule 25)

    ']' 	shift, and go to state 18



state 6

    F  ->  '(' . E ')'   (rule 22)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 19
    F   	go to state 11



state 7

    F  ->  '{' . '}'   (rule 24)

    '}' 	shift, and go to state 20



state 8

    E  ->  L_VALUE_PROP . '=' E   (rule 12)
    F  ->  L_VALUE_PROP .   (rule 19)

    '=' 	shift, and go to state 21

    $default	reduce using rule 19 (F)



state 9

    CMDs  ->  A . @1 ';' CMDs   (rule 2)

    $default	reduce using rule 1 (@1)

    @1  	go to state 22



state 10

    A  ->  E .   (rule 10)
    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 10 (A)



state 11

    E  ->  F .   (rule 17)

    $default	reduce using rule 17 (E)



state 12

    E  ->  ID '=' . E   (rule 11)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 27
    F   	go to state 11



state 13

    L_VALUE_PROP  ->  ID '[' . E ']'   (rule 4)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 28
    F   	go to state 11



state 14

    L_VALUE_PROP  ->  ID '.' . ID   (rule 5)

    ID  	shift, and go to state 29



state 15

    F  ->  ID '(' . PARAM ')'   (rule 23)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    $default	reduce using rule 27 (PARAM)

    L_VALUE_PROP	go to state 8
    E   	go to state 30
    F   	go to state 11
    PARAM	go to state 31
    ARGs	go to state 32



state 16

    LET_LVALUE  ->  ID . '=' E   (rule 7)
    LET_LVALUE  ->  ID .   (rule 8)

    '=' 	shift, and go to state 33

    $default	reduce using rule 8 (LET_LVALUE)



state 17

    LET_LVALUE  ->  LET_LVALUE . ',' LET_LVALUE   (rule 6)
    A  ->  LET LET_LVALUE .   (rule 9)

    ',' 	shift, and go to state 34

    $default	reduce using rule 9 (A)



state 18

    F  ->  '[' ']' .   (rule 25)

    $default	reduce using rule 25 (F)



state 19

    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)
    F  ->  '(' E . ')'   (rule 22)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26
    ')' 	shift, and go to state 35



state 20

    F  ->  '{' '}' .   (rule 24)

    $default	reduce using rule 24 (F)



state 21

    E  ->  L_VALUE_PROP '=' . E   (rule 12)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 36
    F   	go to state 11



state 22

    CMDs  ->  A @1 . ';' CMDs   (rule 2)

    ';' 	shift, and go to state 37



state 23

    E  ->  E '+' . E   (rule 13)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 38
    F   	go to state 11



state 24

    E  ->  E '-' . E   (rule 14)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 39
    F   	go to state 11



state 25

    E  ->  E '*' . E   (rule 15)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 40
    F   	go to state 11



state 26

    E  ->  E '/' . E   (rule 16)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 41
    F   	go to state 11



state 27

    E  ->  ID '=' E .   (rule 11)
    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 11 (E)



state 28

    L_VALUE_PROP  ->  ID '[' E . ']'   (rule 4)
    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26
    ']' 	shift, and go to state 42



state 29

    L_VALUE_PROP  ->  ID '.' ID .   (rule 5)

    $default	reduce using rule 5 (L_VALUE_PROP)



state 30

    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)
    ARGs  ->  E . ',' ARGs   (rule 28)
    ARGs  ->  E .   (rule 29)

    ',' 	shift, and go to state 43
    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 29 (ARGs)



state 31

    F  ->  ID '(' PARAM . ')'   (rule 23)

    ')' 	shift, and go to state 44



state 32

    PARAM  ->  ARGs .   (rule 26)

    $default	reduce using rule 26 (PARAM)



state 33

    LET_LVALUE  ->  ID '=' . E   (rule 7)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 45
    F   	go to state 11



state 34

    LET_LVALUE  ->  LET_LVALUE ',' . LET_LVALUE   (rule 6)

    ID  	shift, and go to state 16

    LET_LVALUE	go to state 46



state 35

    F  ->  '(' E ')' .   (rule 22)

    $default	reduce using rule 22 (F)



state 36

    E  ->  L_VALUE_PROP '=' E .   (rule 12)
    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 12 (E)



state 37

    CMDs  ->  A @1 ';' . CMDs   (rule 2)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    LET 	shift, and go to state 4
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 47
    L_VALUE_PROP	go to state 8
    A   	go to state 9
    E   	go to state 10
    F   	go to state 11



state 38

    E  ->  E . '+' E   (rule 13)
    E  ->  E '+' E .   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 13 (E)



state 39

    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E '-' E .   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 14 (E)



state 40

    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E '*' E .   (rule 15)
    E  ->  E . '/' E   (rule 16)


    $default	reduce using rule 15 (E)



state 41

    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)
    E  ->  E '/' E .   (rule 16)


    $default	reduce using rule 16 (E)



state 42

    L_VALUE_PROP  ->  ID '[' E ']' .   (rule 4)

    $default	reduce using rule 4 (L_VALUE_PROP)



state 43

    ARGs  ->  E ',' . ARGs   (rule 28)

    NUM 	shift, and go to state 1
    STR 	shift, and go to state 2
    ID  	shift, and go to state 3
    '[' 	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7

    L_VALUE_PROP	go to state 8
    E   	go to state 30
    F   	go to state 11
    ARGs	go to state 48



state 44

    F  ->  ID '(' PARAM ')' .   (rule 23)

    $default	reduce using rule 23 (F)



state 45

    LET_LVALUE  ->  ID '=' E .   (rule 7)
    E  ->  E . '+' E   (rule 13)
    E  ->  E . '-' E   (rule 14)
    E  ->  E . '*' E   (rule 15)
    E  ->  E . '/' E   (rule 16)

    '+' 	shift, and go to state 23
    '-' 	shift, and go to state 24
    '*' 	shift, and go to state 25
    '/' 	shift, and go to state 26

    $default	reduce using rule 7 (LET_LVALUE)



state 46

    LET_LVALUE  ->  LET_LVALUE . ',' LET_LVALUE   (rule 6)
    LET_LVALUE  ->  LET_LVALUE ',' LET_LVALUE .   (rule 6)


    $default	reduce using rule 6 (LET_LVALUE)



state 47

    CMDs  ->  A @1 ';' CMDs .   (rule 2)

    $default	reduce using rule 2 (CMDs)



state 48

    ARGs  ->  E ',' ARGs .   (rule 28)

    $default	reduce using rule 28 (ARGs)



state 49

    $   	go to state 50



state 50

    $   	go to state 51



state 51

    $default	accept
