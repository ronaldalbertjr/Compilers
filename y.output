State 56 contains 1 shift/reduce conflict.
State 58 contains 2 shift/reduce conflicts.
State 68 contains 2 shift/reduce conflicts.

Grammar
rule 1    S -> CMDs
rule 2    CMDs -> CMD CMDs
rule 3    CMDs ->		/* empty */
rule 4    CMD -> ATR ';'
rule 5    CMD -> LET DECLVARs ';'
rule 6    CMD -> IF '(' R ')' B B_LINHA
rule 7    B -> '{' CMDs '}'
rule 8    B -> CMD
rule 9    B_LINHA -> ELSE_IF '(' R ')' B B_LINHA
rule 10   B_LINHA -> ELSE B
rule 11   B_LINHA ->		/* empty */
rule 12   DECLVARs -> DECLVAR ',' DECLVARs
rule 13   DECLVARs -> DECLVAR
rule 14   DECLVAR -> ID '=' R
rule 15   DECLVAR -> ID
rule 16   ATR -> ID '=' ATR
rule 17   ATR -> R
rule 18   R -> E '<' E
rule 19   R -> E '>' E
rule 20   R -> E MAIG E
rule 21   R -> E MEIG E
rule 22   R -> E IG E
rule 23   R -> E DIF E
rule 24   R -> E
rule 25   E -> E '+' T
rule 26   E -> E '-' T
rule 27   E -> T
rule 28   T -> T '*' F
rule 29   T -> T '/' F
rule 30   T -> F
rule 31   F -> ID
rule 32   F -> NUM
rule 33   F -> STR
rule 34   F -> '(' E ')'
rule 35   F -> '{' '}'
rule 36   F -> '[' ']'

Terminals, with rules where they appear

$ (-1)
'(' (40) 6 9 34
')' (41) 6 9 34
'*' (42) 28
'+' (43) 25
',' (44) 12
'-' (45) 26
'/' (47) 29
';' (59) 4 5
'<' (60) 18
'=' (61) 14 16
'>' (62) 19
'[' (91) 36
']' (93) 36
'{' (123) 7 35
'}' (125) 7 35
error (256)
NUM (258) 32
ID (259) 14 15 16 31
LET (260) 5
STR (261) 33
IF (262) 6
ELSE (263) 10
ELSE_IF (264) 9
MAIG (265) 20
MEIG (266) 21
IG (267) 22
DIF (268) 23

Nonterminals, with rules where they appear

S (29)
    on left: 1
CMDs (30)
    on left: 2 3, on right: 1 2 7
CMD (31)
    on left: 4 5 6, on right: 2 8
B (32)
    on left: 7 8, on right: 6 9 10
B_LINHA (33)
    on left: 9 10 11, on right: 6 9
DECLVARs (34)
    on left: 12 13, on right: 5 12
DECLVAR (35)
    on left: 14 15, on right: 12 13
ATR (36)
    on left: 16 17, on right: 4 16
R (37)
    on left: 18 19 20 21 22 23 24, on right: 6 9 14 17
E (38)
    on left: 25 26 27, on right: 18 19 20 21 22 23 24 25 26 34
T (39)
    on left: 28 29 30, on right: 25 26 27 28 29
F (40)
    on left: 31 32 33 34 35 36, on right: 28 29 30


state 0

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    $default	reduce using rule 3 (CMDs)

    S   	go to state 70
    CMDs	go to state 9
    CMD 	go to state 10
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 1

    F  ->  NUM .   (rule 32)

    $default	reduce using rule 32 (F)



state 2

    ATR  ->  ID . '=' ATR   (rule 16)
    F  ->  ID .   (rule 31)

    '=' 	shift, and go to state 16

    $default	reduce using rule 31 (F)



state 3

    CMD  ->  LET . DECLVARs ';'   (rule 5)

    ID  	shift, and go to state 17

    DECLVARs	go to state 18
    DECLVAR	go to state 19



state 4

    F  ->  STR .   (rule 33)

    $default	reduce using rule 33 (F)



state 5

    CMD  ->  IF . '(' R ')' B B_LINHA   (rule 6)

    '(' 	shift, and go to state 20



state 6

    F  ->  '(' . E ')'   (rule 34)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 22
    T   	go to state 14
    F   	go to state 15



state 7

    F  ->  '{' . '}'   (rule 35)

    '}' 	shift, and go to state 23



state 8

    F  ->  '[' . ']'   (rule 36)

    ']' 	shift, and go to state 24



state 9

    S  ->  CMDs .   (rule 1)

    $default	reduce using rule 1 (S)



state 10

    CMDs  ->  CMD . CMDs   (rule 2)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 25
    CMD 	go to state 10
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 11

    CMD  ->  ATR . ';'   (rule 4)

    ';' 	shift, and go to state 26



state 12

    ATR  ->  R .   (rule 17)

    $default	reduce using rule 17 (ATR)



state 13

    R  ->  E . '<' E   (rule 18)
    R  ->  E . '>' E   (rule 19)
    R  ->  E . MAIG E   (rule 20)
    R  ->  E . MEIG E   (rule 21)
    R  ->  E . IG E   (rule 22)
    R  ->  E . DIF E   (rule 23)
    R  ->  E .   (rule 24)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    MAIG	shift, and go to state 27
    MEIG	shift, and go to state 28
    IG  	shift, and go to state 29
    DIF 	shift, and go to state 30
    '<' 	shift, and go to state 31
    '>' 	shift, and go to state 32
    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 24 (R)



state 14

    E  ->  T .   (rule 27)
    T  ->  T . '*' F   (rule 28)
    T  ->  T . '/' F   (rule 29)

    '*' 	shift, and go to state 35
    '/' 	shift, and go to state 36

    $default	reduce using rule 27 (E)



state 15

    T  ->  F .   (rule 30)

    $default	reduce using rule 30 (T)



state 16

    ATR  ->  ID '=' . ATR   (rule 16)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    ATR 	go to state 37
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 17

    DECLVAR  ->  ID . '=' R   (rule 14)
    DECLVAR  ->  ID .   (rule 15)

    '=' 	shift, and go to state 38

    $default	reduce using rule 15 (DECLVAR)



state 18

    CMD  ->  LET DECLVARs . ';'   (rule 5)

    ';' 	shift, and go to state 39



state 19

    DECLVARs  ->  DECLVAR . ',' DECLVARs   (rule 12)
    DECLVARs  ->  DECLVAR .   (rule 13)

    ',' 	shift, and go to state 40

    $default	reduce using rule 13 (DECLVARs)



state 20

    CMD  ->  IF '(' . R ')' B B_LINHA   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    R   	go to state 41
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 21

    F  ->  ID .   (rule 31)

    $default	reduce using rule 31 (F)



state 22

    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)
    F  ->  '(' E . ')'   (rule 34)

    ')' 	shift, and go to state 42
    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34



state 23

    F  ->  '{' '}' .   (rule 35)

    $default	reduce using rule 35 (F)



state 24

    F  ->  '[' ']' .   (rule 36)

    $default	reduce using rule 36 (F)



state 25

    CMDs  ->  CMD CMDs .   (rule 2)

    $default	reduce using rule 2 (CMDs)



state 26

    CMD  ->  ATR ';' .   (rule 4)

    $default	reduce using rule 4 (CMD)



state 27

    R  ->  E MAIG . E   (rule 20)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 43
    T   	go to state 14
    F   	go to state 15



state 28

    R  ->  E MEIG . E   (rule 21)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 44
    T   	go to state 14
    F   	go to state 15



state 29

    R  ->  E IG . E   (rule 22)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 45
    T   	go to state 14
    F   	go to state 15



state 30

    R  ->  E DIF . E   (rule 23)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 46
    T   	go to state 14
    F   	go to state 15



state 31

    R  ->  E '<' . E   (rule 18)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 47
    T   	go to state 14
    F   	go to state 15



state 32

    R  ->  E '>' . E   (rule 19)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 48
    T   	go to state 14
    F   	go to state 15



state 33

    E  ->  E '+' . T   (rule 25)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    T   	go to state 49
    F   	go to state 15



state 34

    E  ->  E '-' . T   (rule 26)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    T   	go to state 50
    F   	go to state 15



state 35

    T  ->  T '*' . F   (rule 28)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    F   	go to state 51



state 36

    T  ->  T '/' . F   (rule 29)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    F   	go to state 52



state 37

    ATR  ->  ID '=' ATR .   (rule 16)

    $default	reduce using rule 16 (ATR)



state 38

    DECLVAR  ->  ID '=' . R   (rule 14)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    R   	go to state 53
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 39

    CMD  ->  LET DECLVARs ';' .   (rule 5)

    $default	reduce using rule 5 (CMD)



state 40

    DECLVARs  ->  DECLVAR ',' . DECLVARs   (rule 12)

    ID  	shift, and go to state 17

    DECLVARs	go to state 54
    DECLVAR	go to state 19



state 41

    CMD  ->  IF '(' R . ')' B B_LINHA   (rule 6)

    ')' 	shift, and go to state 55



state 42

    F  ->  '(' E ')' .   (rule 34)

    $default	reduce using rule 34 (F)



state 43

    R  ->  E MAIG E .   (rule 20)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 20 (R)



state 44

    R  ->  E MEIG E .   (rule 21)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 21 (R)



state 45

    R  ->  E IG E .   (rule 22)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 22 (R)



state 46

    R  ->  E DIF E .   (rule 23)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 23 (R)



state 47

    R  ->  E '<' E .   (rule 18)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 18 (R)



state 48

    R  ->  E '>' E .   (rule 19)
    E  ->  E . '+' T   (rule 25)
    E  ->  E . '-' T   (rule 26)

    '+' 	shift, and go to state 33
    '-' 	shift, and go to state 34

    $default	reduce using rule 19 (R)



state 49

    E  ->  E '+' T .   (rule 25)
    T  ->  T . '*' F   (rule 28)
    T  ->  T . '/' F   (rule 29)

    '*' 	shift, and go to state 35
    '/' 	shift, and go to state 36

    $default	reduce using rule 25 (E)



state 50

    E  ->  E '-' T .   (rule 26)
    T  ->  T . '*' F   (rule 28)
    T  ->  T . '/' F   (rule 29)

    '*' 	shift, and go to state 35
    '/' 	shift, and go to state 36

    $default	reduce using rule 26 (E)



state 51

    T  ->  T '*' F .   (rule 28)

    $default	reduce using rule 28 (T)



state 52

    T  ->  T '/' F .   (rule 29)

    $default	reduce using rule 29 (T)



state 53

    DECLVAR  ->  ID '=' R .   (rule 14)

    $default	reduce using rule 14 (DECLVAR)



state 54

    DECLVARs  ->  DECLVAR ',' DECLVARs .   (rule 12)

    $default	reduce using rule 12 (DECLVARs)



state 55

    CMD  ->  IF '(' R ')' . B B_LINHA   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 56
    '[' 	shift, and go to state 8

    CMD 	go to state 57
    B   	go to state 58
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 56

    B  ->  '{' . CMDs '}'   (rule 7)
    F  ->  '{' . '}'   (rule 35)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '}' 	shift, and go to state 23
    '[' 	shift, and go to state 8

    '}' 	[reduce using rule 3 (CMDs)]
    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 59
    CMD 	go to state 10
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 57

    B  ->  CMD .   (rule 8)

    $default	reduce using rule 8 (B)



state 58

    CMD  ->  IF '(' R ')' B . B_LINHA   (rule 6)

    ELSE	shift, and go to state 60
    ELSE_IF	shift, and go to state 61

    ELSE	[reduce using rule 11 (B_LINHA)]
    ELSE_IF	[reduce using rule 11 (B_LINHA)]
    $default	reduce using rule 11 (B_LINHA)

    B_LINHA	go to state 62



state 59

    B  ->  '{' CMDs . '}'   (rule 7)

    '}' 	shift, and go to state 63



state 60

    B_LINHA  ->  ELSE . B   (rule 10)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 56
    '[' 	shift, and go to state 8

    CMD 	go to state 57
    B   	go to state 64
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 61

    B_LINHA  ->  ELSE_IF . '(' R ')' B B_LINHA   (rule 9)

    '(' 	shift, and go to state 65



state 62

    CMD  ->  IF '(' R ')' B B_LINHA .   (rule 6)

    $default	reduce using rule 6 (CMD)



state 63

    B  ->  '{' CMDs '}' .   (rule 7)

    $default	reduce using rule 7 (B)



state 64

    B_LINHA  ->  ELSE B .   (rule 10)

    $default	reduce using rule 10 (B_LINHA)



state 65

    B_LINHA  ->  ELSE_IF '(' . R ')' B B_LINHA   (rule 9)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    R   	go to state 66
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 66

    B_LINHA  ->  ELSE_IF '(' R . ')' B B_LINHA   (rule 9)

    ')' 	shift, and go to state 67



state 67

    B_LINHA  ->  ELSE_IF '(' R ')' . B B_LINHA   (rule 9)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 56
    '[' 	shift, and go to state 8

    CMD 	go to state 57
    B   	go to state 68
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 68

    B_LINHA  ->  ELSE_IF '(' R ')' B . B_LINHA   (rule 9)

    ELSE	shift, and go to state 60
    ELSE_IF	shift, and go to state 61

    ELSE	[reduce using rule 11 (B_LINHA)]
    ELSE_IF	[reduce using rule 11 (B_LINHA)]
    $default	reduce using rule 11 (B_LINHA)

    B_LINHA	go to state 69



state 69

    B_LINHA  ->  ELSE_IF '(' R ')' B B_LINHA .   (rule 9)

    $default	reduce using rule 9 (B_LINHA)



state 70

    $   	go to state 71



state 71

    $   	go to state 72



state 72

    $default	accept
