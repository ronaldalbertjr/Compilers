
Grammar
rule 1    S -> CMDs
rule 2    CMDs -> CMD ';' CMDs
rule 3    CMDs ->		/* empty */
rule 4    CMD -> ATR
rule 5    CMD -> LET DECLVARs
rule 6    CMD -> IF '(' R ')' CMD
rule 7    DECLVARs -> DECLVAR ',' DECLVARs
rule 8    DECLVARs -> DECLVAR
rule 9    DECLVAR -> ID '=' R
rule 10   DECLVAR -> ID
rule 11   ATR -> ID '=' ATR
rule 12   ATR -> R
rule 13   R -> E '<' E
rule 14   R -> E '>' E
rule 15   R -> E
rule 16   E -> E '+' T
rule 17   E -> E '-' T
rule 18   E -> T
rule 19   T -> T '*' F
rule 20   T -> T '/' F
rule 21   T -> F
rule 22   F -> ID
rule 23   F -> NUM
rule 24   F -> STR
rule 25   F -> '(' E ')'
rule 26   F -> '{' '}'
rule 27   F -> '[' ']'

Terminals, with rules where they appear

$ (-1)
'(' (40) 6 25
')' (41) 6 25
'*' (42) 19
'+' (43) 16
',' (44) 7
'-' (45) 17
'/' (47) 20
';' (59) 2
'<' (60) 13
'=' (61) 9 11
'>' (62) 14
'[' (91) 27
']' (93) 27
'{' (123) 26
'}' (125) 26
error (256)
NUM (258) 23
ID (259) 9 10 11 22
LET (260) 5
STR (261) 24
IF (262) 6

Nonterminals, with rules where they appear

S (23)
    on left: 1
CMDs (24)
    on left: 2 3, on right: 1 2
CMD (25)
    on left: 4 5 6, on right: 2 6
DECLVARs (26)
    on left: 7 8, on right: 5 7
DECLVAR (27)
    on left: 9 10, on right: 7 8
ATR (28)
    on left: 11 12, on right: 4 11
R (29)
    on left: 13 14 15, on right: 6 9 12
E (30)
    on left: 16 17 18, on right: 13 14 15 16 17 25
T (31)
    on left: 19 20 21, on right: 16 17 18 19 20
F (32)
    on left: 22 23 24 25 26 27, on right: 19 20 21


state 0

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    $default	reduce using rule 3 (CMDs)

    S   	go to state 48
    CMDs	go to state 9
    CMD 	go to state 10
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 1

    F  ->  NUM .   (rule 23)

    $default	reduce using rule 23 (F)



state 2

    ATR  ->  ID . '=' ATR   (rule 11)
    F  ->  ID .   (rule 22)

    '=' 	shift, and go to state 16

    $default	reduce using rule 22 (F)



state 3

    CMD  ->  LET . DECLVARs   (rule 5)

    ID  	shift, and go to state 17

    DECLVARs	go to state 18
    DECLVAR	go to state 19



state 4

    F  ->  STR .   (rule 24)

    $default	reduce using rule 24 (F)



state 5

    CMD  ->  IF . '(' R ')' CMD   (rule 6)

    '(' 	shift, and go to state 20



state 6

    F  ->  '(' . E ')'   (rule 25)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 22
    T   	go to state 14
    F   	go to state 15



state 7

    F  ->  '{' . '}'   (rule 26)

    '}' 	shift, and go to state 23



state 8

    F  ->  '[' . ']'   (rule 27)

    ']' 	shift, and go to state 24



state 9

    S  ->  CMDs .   (rule 1)

    $default	reduce using rule 1 (S)



state 10

    CMDs  ->  CMD . ';' CMDs   (rule 2)

    ';' 	shift, and go to state 25



state 11

    CMD  ->  ATR .   (rule 4)

    $default	reduce using rule 4 (CMD)



state 12

    ATR  ->  R .   (rule 12)

    $default	reduce using rule 12 (ATR)



state 13

    R  ->  E . '<' E   (rule 13)
    R  ->  E . '>' E   (rule 14)
    R  ->  E .   (rule 15)
    E  ->  E . '+' T   (rule 16)
    E  ->  E . '-' T   (rule 17)

    '<' 	shift, and go to state 26
    '>' 	shift, and go to state 27
    '+' 	shift, and go to state 28
    '-' 	shift, and go to state 29

    $default	reduce using rule 15 (R)



state 14

    E  ->  T .   (rule 18)
    T  ->  T . '*' F   (rule 19)
    T  ->  T . '/' F   (rule 20)

    '*' 	shift, and go to state 30
    '/' 	shift, and go to state 31

    $default	reduce using rule 18 (E)



state 15

    T  ->  F .   (rule 21)

    $default	reduce using rule 21 (T)



state 16

    ATR  ->  ID '=' . ATR   (rule 11)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    ATR 	go to state 32
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 17

    DECLVAR  ->  ID . '=' R   (rule 9)
    DECLVAR  ->  ID .   (rule 10)

    '=' 	shift, and go to state 33

    $default	reduce using rule 10 (DECLVAR)



state 18

    CMD  ->  LET DECLVARs .   (rule 5)

    $default	reduce using rule 5 (CMD)



state 19

    DECLVARs  ->  DECLVAR . ',' DECLVARs   (rule 7)
    DECLVARs  ->  DECLVAR .   (rule 8)

    ',' 	shift, and go to state 34

    $default	reduce using rule 8 (DECLVARs)



state 20

    CMD  ->  IF '(' . R ')' CMD   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    R   	go to state 35
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 21

    F  ->  ID .   (rule 22)

    $default	reduce using rule 22 (F)



state 22

    E  ->  E . '+' T   (rule 16)
    E  ->  E . '-' T   (rule 17)
    F  ->  '(' E . ')'   (rule 25)

    ')' 	shift, and go to state 36
    '+' 	shift, and go to state 28
    '-' 	shift, and go to state 29



state 23

    F  ->  '{' '}' .   (rule 26)

    $default	reduce using rule 26 (F)



state 24

    F  ->  '[' ']' .   (rule 27)

    $default	reduce using rule 27 (F)



state 25

    CMDs  ->  CMD ';' . CMDs   (rule 2)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 37
    CMD 	go to state 10
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 26

    R  ->  E '<' . E   (rule 13)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 38
    T   	go to state 14
    F   	go to state 15



state 27

    R  ->  E '>' . E   (rule 14)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    E   	go to state 39
    T   	go to state 14
    F   	go to state 15



state 28

    E  ->  E '+' . T   (rule 16)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    T   	go to state 40
    F   	go to state 15



state 29

    E  ->  E '-' . T   (rule 17)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    T   	go to state 41
    F   	go to state 15



state 30

    T  ->  T '*' . F   (rule 19)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    F   	go to state 42



state 31

    T  ->  T '/' . F   (rule 20)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    F   	go to state 43



state 32

    ATR  ->  ID '=' ATR .   (rule 11)

    $default	reduce using rule 11 (ATR)



state 33

    DECLVAR  ->  ID '=' . R   (rule 9)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 21
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    R   	go to state 44
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 34

    DECLVARs  ->  DECLVAR ',' . DECLVARs   (rule 7)

    ID  	shift, and go to state 17

    DECLVARs	go to state 45
    DECLVAR	go to state 19



state 35

    CMD  ->  IF '(' R . ')' CMD   (rule 6)

    ')' 	shift, and go to state 46



state 36

    F  ->  '(' E ')' .   (rule 25)

    $default	reduce using rule 25 (F)



state 37

    CMDs  ->  CMD ';' CMDs .   (rule 2)

    $default	reduce using rule 2 (CMDs)



state 38

    R  ->  E '<' E .   (rule 13)
    E  ->  E . '+' T   (rule 16)
    E  ->  E . '-' T   (rule 17)

    '+' 	shift, and go to state 28
    '-' 	shift, and go to state 29

    $default	reduce using rule 13 (R)



state 39

    R  ->  E '>' E .   (rule 14)
    E  ->  E . '+' T   (rule 16)
    E  ->  E . '-' T   (rule 17)

    '+' 	shift, and go to state 28
    '-' 	shift, and go to state 29

    $default	reduce using rule 14 (R)



state 40

    E  ->  E '+' T .   (rule 16)
    T  ->  T . '*' F   (rule 19)
    T  ->  T . '/' F   (rule 20)

    '*' 	shift, and go to state 30
    '/' 	shift, and go to state 31

    $default	reduce using rule 16 (E)



state 41

    E  ->  E '-' T .   (rule 17)
    T  ->  T . '*' F   (rule 19)
    T  ->  T . '/' F   (rule 20)

    '*' 	shift, and go to state 30
    '/' 	shift, and go to state 31

    $default	reduce using rule 17 (E)



state 42

    T  ->  T '*' F .   (rule 19)

    $default	reduce using rule 19 (T)



state 43

    T  ->  T '/' F .   (rule 20)

    $default	reduce using rule 20 (T)



state 44

    DECLVAR  ->  ID '=' R .   (rule 9)

    $default	reduce using rule 9 (DECLVAR)



state 45

    DECLVARs  ->  DECLVAR ',' DECLVARs .   (rule 7)

    $default	reduce using rule 7 (DECLVARs)



state 46

    CMD  ->  IF '(' R ')' . CMD   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8

    CMD 	go to state 47
    ATR 	go to state 11
    R   	go to state 12
    E   	go to state 13
    T   	go to state 14
    F   	go to state 15



state 47

    CMD  ->  IF '(' R ')' CMD .   (rule 6)

    $default	reduce using rule 6 (CMD)



state 48

    $   	go to state 49



state 49

    $   	go to state 50



state 50

    $default	accept
