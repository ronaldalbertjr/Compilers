State 61 contains 4 reduce/reduce conflicts.
State 62 contains 4 reduce/reduce conflicts.
State 63 contains 6 reduce/reduce conflicts.
State 64 contains 6 reduce/reduce conflicts.
State 69 contains 1 shift/reduce conflict.
State 71 contains 2 shift/reduce conflicts.
State 81 contains 2 shift/reduce conflicts.

Grammar
rule 1    S -> CMDs
rule 2    CMDs -> CMD CMDs
rule 3    CMDs ->		/* empty */
rule 4    CMD -> ATR ';'
rule 5    CMD -> LET DECLVARs ';'
rule 6    CMD -> IF '(' R ')' B C
rule 7    B -> '{' CMDs '}'
rule 8    B -> CMD
rule 9    C -> ELSE_IF '(' R ')' B C
rule 10   C -> ELSE B
rule 11   C ->		/* empty */
rule 12   DECLVARs -> DECLVAR ',' DECLVARs
rule 13   DECLVARs -> DECLVAR
rule 14   DECLVAR -> ID '=' R
rule 15   DECLVAR -> ID
rule 16   PROP -> E '[' E ']'
rule 17   PROP -> E '.' ID
rule 18   ATR -> ID '=' ATR
rule 19   ATR -> PROP '=' ATR
rule 20   ATR -> R
rule 21   R -> E '<' E
rule 22   R -> E '>' E
rule 23   R -> E MAIG E
rule 24   R -> E MEIG E
rule 25   R -> E IG E
rule 26   R -> E DIF E
rule 27   R -> E
rule 28   E -> E '+' T
rule 29   E -> E '-' T
rule 30   E -> T
rule 31   T -> T '*' F
rule 32   T -> T '/' F
rule 33   T -> F
rule 34   R_NUM -> '-' NUM
rule 35   R_NUM -> NUM
rule 36   F -> ID
rule 37   F -> PROP
rule 38   F -> R_NUM
rule 39   F -> STR
rule 40   F -> '(' E ')'
rule 41   F -> '{' '}'
rule 42   F -> '[' ']'

Terminals, with rules where they appear

$ (-1)
'(' (40) 6 9 40
')' (41) 6 9 40
'*' (42) 31
'+' (43) 28
',' (44) 12
'-' (45) 29 34
'.' (46) 17
'/' (47) 32
';' (59) 4 5
'<' (60) 21
'=' (61) 14 18 19
'>' (62) 22
'[' (91) 16 42
']' (93) 16 42
'{' (123) 7 41
'}' (125) 7 41
error (256)
NUM (258) 34 35
ID (259) 14 15 17 18 36
LET (260) 5
STR (261) 39
IF (262) 6
ELSE (263) 10
ELSE_IF (264) 9
MAIG (265) 23
MEIG (266) 24
IG (267) 25
DIF (268) 26

Nonterminals, with rules where they appear

S (30)
    on left: 1
CMDs (31)
    on left: 2 3, on right: 1 2 7
CMD (32)
    on left: 4 5 6, on right: 2 8
B (33)
    on left: 7 8, on right: 6 9 10
C (34)
    on left: 9 10 11, on right: 6 9
DECLVARs (35)
    on left: 12 13, on right: 5 12
DECLVAR (36)
    on left: 14 15, on right: 12 13
PROP (37)
    on left: 16 17, on right: 19 37
ATR (38)
    on left: 18 19 20, on right: 4 18 19
R (39)
    on left: 21 22 23 24 25 26 27, on right: 6 9 14 20
E (40)
    on left: 28 29 30, on right: 16 17 21 22 23 24 25 26 27 28 29 40
T (41)
    on left: 31 32 33, on right: 28 29 30 31 32
R_NUM (42)
    on left: 34 35, on right: 38
F (43)
    on left: 36 37 38 39 40 41 42, on right: 31 32 33


state 0

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    $default	reduce using rule 3 (CMDs)

    S   	go to state 83
    CMDs	go to state 10
    CMD 	go to state 11
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 1

    R_NUM  ->  NUM .   (rule 35)

    $default	reduce using rule 35 (R_NUM)



state 2

    ATR  ->  ID . '=' ATR   (rule 18)
    F  ->  ID .   (rule 36)

    '=' 	shift, and go to state 19

    $default	reduce using rule 36 (F)



state 3

    CMD  ->  LET . DECLVARs ';'   (rule 5)

    ID  	shift, and go to state 20

    DECLVARs	go to state 21
    DECLVAR	go to state 22



state 4

    F  ->  STR .   (rule 39)

    $default	reduce using rule 39 (F)



state 5

    CMD  ->  IF . '(' R ')' B C   (rule 6)

    '(' 	shift, and go to state 23



state 6

    F  ->  '(' . E ')'   (rule 40)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 26
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 7

    F  ->  '{' . '}'   (rule 41)

    '}' 	shift, and go to state 27



state 8

    F  ->  '[' . ']'   (rule 42)

    ']' 	shift, and go to state 28



state 9

    R_NUM  ->  '-' . NUM   (rule 34)

    NUM 	shift, and go to state 29



state 10

    S  ->  CMDs .   (rule 1)

    $default	reduce using rule 1 (S)



state 11

    CMDs  ->  CMD . CMDs   (rule 2)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 30
    CMD 	go to state 11
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 12

    ATR  ->  PROP . '=' ATR   (rule 19)
    F  ->  PROP .   (rule 37)

    '=' 	shift, and go to state 31

    $default	reduce using rule 37 (F)



state 13

    CMD  ->  ATR . ';'   (rule 4)

    ';' 	shift, and go to state 32



state 14

    ATR  ->  R .   (rule 20)

    $default	reduce using rule 20 (ATR)



state 15

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E . '<' E   (rule 21)
    R  ->  E . '>' E   (rule 22)
    R  ->  E . MAIG E   (rule 23)
    R  ->  E . MEIG E   (rule 24)
    R  ->  E . IG E   (rule 25)
    R  ->  E . DIF E   (rule 26)
    R  ->  E .   (rule 27)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    MAIG	shift, and go to state 33
    MEIG	shift, and go to state 34
    IG  	shift, and go to state 35
    DIF 	shift, and go to state 36
    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '<' 	shift, and go to state 39
    '>' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 27 (R)



state 16

    E  ->  T .   (rule 30)
    T  ->  T . '*' F   (rule 31)
    T  ->  T . '/' F   (rule 32)

    '*' 	shift, and go to state 43
    '/' 	shift, and go to state 44

    $default	reduce using rule 30 (E)



state 17

    F  ->  R_NUM .   (rule 38)

    $default	reduce using rule 38 (F)



state 18

    T  ->  F .   (rule 33)

    $default	reduce using rule 33 (T)



state 19

    ATR  ->  ID '=' . ATR   (rule 18)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 12
    ATR 	go to state 45
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 20

    DECLVAR  ->  ID . '=' R   (rule 14)
    DECLVAR  ->  ID .   (rule 15)

    '=' 	shift, and go to state 46

    $default	reduce using rule 15 (DECLVAR)



state 21

    CMD  ->  LET DECLVARs . ';'   (rule 5)

    ';' 	shift, and go to state 47



state 22

    DECLVARs  ->  DECLVAR . ',' DECLVARs   (rule 12)
    DECLVARs  ->  DECLVAR .   (rule 13)

    ',' 	shift, and go to state 48

    $default	reduce using rule 13 (DECLVARs)



state 23

    CMD  ->  IF '(' . R ')' B C   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    R   	go to state 49
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 24

    F  ->  ID .   (rule 36)

    $default	reduce using rule 36 (F)



state 25

    F  ->  PROP .   (rule 37)

    $default	reduce using rule 37 (F)



state 26

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)
    F  ->  '(' E . ')'   (rule 40)

    ')' 	shift, and go to state 50
    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42



state 27

    F  ->  '{' '}' .   (rule 41)

    $default	reduce using rule 41 (F)



state 28

    F  ->  '[' ']' .   (rule 42)

    $default	reduce using rule 42 (F)



state 29

    R_NUM  ->  '-' NUM .   (rule 34)

    $default	reduce using rule 34 (R_NUM)



state 30

    CMDs  ->  CMD CMDs .   (rule 2)

    $default	reduce using rule 2 (CMDs)



state 31

    ATR  ->  PROP '=' . ATR   (rule 19)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 12
    ATR 	go to state 51
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 32

    CMD  ->  ATR ';' .   (rule 4)

    $default	reduce using rule 4 (CMD)



state 33

    R  ->  E MAIG . E   (rule 23)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 52
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 34

    R  ->  E MEIG . E   (rule 24)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 53
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 35

    R  ->  E IG . E   (rule 25)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 54
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 36

    R  ->  E DIF . E   (rule 26)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 55
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 37

    PROP  ->  E '[' . E ']'   (rule 16)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 56
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 38

    PROP  ->  E '.' . ID   (rule 17)

    ID  	shift, and go to state 57



state 39

    R  ->  E '<' . E   (rule 21)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 58
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 40

    R  ->  E '>' . E   (rule 22)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 59
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 41

    E  ->  E '+' . T   (rule 28)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 60
    T   	go to state 61
    R_NUM	go to state 17
    F   	go to state 18



state 42

    E  ->  E '-' . T   (rule 29)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 60
    T   	go to state 62
    R_NUM	go to state 17
    F   	go to state 18



state 43

    T  ->  T '*' . F   (rule 31)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 60
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 63



state 44

    T  ->  T '/' . F   (rule 32)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    E   	go to state 60
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 64



state 45

    ATR  ->  ID '=' ATR .   (rule 18)

    $default	reduce using rule 18 (ATR)



state 46

    DECLVAR  ->  ID '=' . R   (rule 14)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    R   	go to state 65
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 47

    CMD  ->  LET DECLVARs ';' .   (rule 5)

    $default	reduce using rule 5 (CMD)



state 48

    DECLVARs  ->  DECLVAR ',' . DECLVARs   (rule 12)

    ID  	shift, and go to state 20

    DECLVARs	go to state 66
    DECLVAR	go to state 22



state 49

    CMD  ->  IF '(' R . ')' B C   (rule 6)

    ')' 	shift, and go to state 67



state 50

    F  ->  '(' E ')' .   (rule 40)

    $default	reduce using rule 40 (F)



state 51

    ATR  ->  PROP '=' ATR .   (rule 19)

    $default	reduce using rule 19 (ATR)



state 52

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E MAIG E .   (rule 23)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 23 (R)



state 53

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E MEIG E .   (rule 24)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 24 (R)



state 54

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E IG E .   (rule 25)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 25 (R)



state 55

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E DIF E .   (rule 26)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 26 (R)



state 56

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E '[' E . ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    ']' 	shift, and go to state 68
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42



state 57

    PROP  ->  E '.' ID .   (rule 17)

    $default	reduce using rule 17 (PROP)



state 58

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E '<' E .   (rule 21)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 21 (R)



state 59

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    R  ->  E '>' E .   (rule 22)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42

    $default	reduce using rule 22 (R)



state 60

    PROP  ->  E . '[' E ']'   (rule 16)
    PROP  ->  E . '.' ID   (rule 17)
    E  ->  E . '+' T   (rule 28)
    E  ->  E . '-' T   (rule 29)

    '[' 	shift, and go to state 37
    '.' 	shift, and go to state 38
    '+' 	shift, and go to state 41
    '-' 	shift, and go to state 42



state 61

    E  ->  E '+' T .   (rule 28)
    E  ->  T .   (rule 30)
    T  ->  T . '*' F   (rule 31)
    T  ->  T . '/' F   (rule 32)

    '*' 	shift, and go to state 43
    '/' 	shift, and go to state 44

    '[' 	reduce using rule 28 (E)
    '[' 	[reduce using rule 30 (E)]
    '.' 	reduce using rule 28 (E)
    '.' 	[reduce using rule 30 (E)]
    '+' 	reduce using rule 28 (E)
    '+' 	[reduce using rule 30 (E)]
    '-' 	reduce using rule 28 (E)
    '-' 	[reduce using rule 30 (E)]
    $default	reduce using rule 28 (E)



state 62

    E  ->  E '-' T .   (rule 29)
    E  ->  T .   (rule 30)
    T  ->  T . '*' F   (rule 31)
    T  ->  T . '/' F   (rule 32)

    '*' 	shift, and go to state 43
    '/' 	shift, and go to state 44

    '[' 	reduce using rule 29 (E)
    '[' 	[reduce using rule 30 (E)]
    '.' 	reduce using rule 29 (E)
    '.' 	[reduce using rule 30 (E)]
    '+' 	reduce using rule 29 (E)
    '+' 	[reduce using rule 30 (E)]
    '-' 	reduce using rule 29 (E)
    '-' 	[reduce using rule 30 (E)]
    $default	reduce using rule 29 (E)



state 63

    T  ->  T '*' F .   (rule 31)
    T  ->  F .   (rule 33)

    '[' 	reduce using rule 31 (T)
    '[' 	[reduce using rule 33 (T)]
    '.' 	reduce using rule 31 (T)
    '.' 	[reduce using rule 33 (T)]
    '+' 	reduce using rule 31 (T)
    '+' 	[reduce using rule 33 (T)]
    '-' 	reduce using rule 31 (T)
    '-' 	[reduce using rule 33 (T)]
    '*' 	reduce using rule 31 (T)
    '*' 	[reduce using rule 33 (T)]
    '/' 	reduce using rule 31 (T)
    '/' 	[reduce using rule 33 (T)]
    $default	reduce using rule 31 (T)



state 64

    T  ->  T '/' F .   (rule 32)
    T  ->  F .   (rule 33)

    '[' 	reduce using rule 32 (T)
    '[' 	[reduce using rule 33 (T)]
    '.' 	reduce using rule 32 (T)
    '.' 	[reduce using rule 33 (T)]
    '+' 	reduce using rule 32 (T)
    '+' 	[reduce using rule 33 (T)]
    '-' 	reduce using rule 32 (T)
    '-' 	[reduce using rule 33 (T)]
    '*' 	reduce using rule 32 (T)
    '*' 	[reduce using rule 33 (T)]
    '/' 	reduce using rule 32 (T)
    '/' 	[reduce using rule 33 (T)]
    $default	reduce using rule 32 (T)



state 65

    DECLVAR  ->  ID '=' R .   (rule 14)

    $default	reduce using rule 14 (DECLVAR)



state 66

    DECLVARs  ->  DECLVAR ',' DECLVARs .   (rule 12)

    $default	reduce using rule 12 (DECLVARs)



state 67

    CMD  ->  IF '(' R ')' . B C   (rule 6)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 69
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    CMD 	go to state 70
    B   	go to state 71
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 68

    PROP  ->  E '[' E ']' .   (rule 16)

    $default	reduce using rule 16 (PROP)



state 69

    B  ->  '{' . CMDs '}'   (rule 7)
    F  ->  '{' . '}'   (rule 41)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '}' 	shift, and go to state 27
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    '}' 	[reduce using rule 3 (CMDs)]
    $default	reduce using rule 3 (CMDs)

    CMDs	go to state 72
    CMD 	go to state 11
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 70

    B  ->  CMD .   (rule 8)

    $default	reduce using rule 8 (B)



state 71

    CMD  ->  IF '(' R ')' B . C   (rule 6)

    ELSE	shift, and go to state 73
    ELSE_IF	shift, and go to state 74

    ELSE	[reduce using rule 11 (C)]
    ELSE_IF	[reduce using rule 11 (C)]
    $default	reduce using rule 11 (C)

    C   	go to state 75



state 72

    B  ->  '{' CMDs . '}'   (rule 7)

    '}' 	shift, and go to state 76



state 73

    C  ->  ELSE . B   (rule 10)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 69
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    CMD 	go to state 70
    B   	go to state 77
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 74

    C  ->  ELSE_IF . '(' R ')' B C   (rule 9)

    '(' 	shift, and go to state 78



state 75

    CMD  ->  IF '(' R ')' B C .   (rule 6)

    $default	reduce using rule 6 (CMD)



state 76

    B  ->  '{' CMDs '}' .   (rule 7)

    $default	reduce using rule 7 (B)



state 77

    C  ->  ELSE B .   (rule 10)

    $default	reduce using rule 10 (C)



state 78

    C  ->  ELSE_IF '(' . R ')' B C   (rule 9)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 24
    STR 	shift, and go to state 4
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 7
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    PROP	go to state 25
    R   	go to state 79
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 79

    C  ->  ELSE_IF '(' R . ')' B C   (rule 9)

    ')' 	shift, and go to state 80



state 80

    C  ->  ELSE_IF '(' R ')' . B C   (rule 9)

    NUM 	shift, and go to state 1
    ID  	shift, and go to state 2
    LET 	shift, and go to state 3
    STR 	shift, and go to state 4
    IF  	shift, and go to state 5
    '(' 	shift, and go to state 6
    '{' 	shift, and go to state 69
    '[' 	shift, and go to state 8
    '-' 	shift, and go to state 9

    CMD 	go to state 70
    B   	go to state 81
    PROP	go to state 12
    ATR 	go to state 13
    R   	go to state 14
    E   	go to state 15
    T   	go to state 16
    R_NUM	go to state 17
    F   	go to state 18



state 81

    C  ->  ELSE_IF '(' R ')' B . C   (rule 9)

    ELSE	shift, and go to state 73
    ELSE_IF	shift, and go to state 74

    ELSE	[reduce using rule 11 (C)]
    ELSE_IF	[reduce using rule 11 (C)]
    $default	reduce using rule 11 (C)

    C   	go to state 82



state 82

    C  ->  ELSE_IF '(' R ')' B C .   (rule 9)

    $default	reduce using rule 9 (C)



state 83

    $   	go to state 84



state 84

    $   	go to state 85



state 85

    $default	accept
