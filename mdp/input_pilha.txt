log
&
log
{}
=
'&funcao'
120
[=]
^
invert
&
invert
{}
=
'&funcao'
140
[=]
^
reduce
&
reduce
{}
=
'&funcao'
215
[=]
^
a
&
a
[]
0
1
[<=]
1
2
[<=]
2
3
[<=]
3
4
[<=]
4
5
[<=]
=
^
a
@
{}
'&funcao'
300
[<=]
0
3
reduce
@
$
1
log
@
$
^
b
&
b
[]
0
{}
'&funcao'
331
[<=]
[<=]
1
{}
'&funcao'
352
[<=]
[<=]
=
^
pipe
&
pipe
{}
'&funcao'
405
[<=]
=
^
b
@
9
2
pipe
@
$
1
log
@
$
^
b
@
1
invert
@
$
9
2
pipe
@
$
1
log
@
$
^
.
msg
&
msg
arguments
@
0
[@]
=
^
msg
@
println
#
undefined
^
undefined
@
'&retorno'
@
~
a
&
a
arguments
@
0
[@]
=
^
res
&
res
[]
=
^
i
&
i
0
=
^
i
@
a
@
size
[@]
<
!
205
?
res
@
a
@
size
[@]
i
@
-
1
-
a
@
i
@
[@]
[=]
^
i
i
@
1
+
=
^
i
@
a
@
size
[@]
<
171
?
res
@
'&retorno'
@
~
undefined
@
'&retorno'
@
~
a
&
a
arguments
@
0
[@]
=
^
f
&
f
arguments
@
1
[@]
=
^
x
&
x
arguments
@
2
[@]
=
^
i
&
i
0
=
^
i
@
a
@
size
[@]
<
!
290
?
x
a
@
i
@
[@]
x
@
i
@
3
f
@
$
=
^
i
i
@
1
+
=
^
i
@
a
@
size
[@]
<
258
?
x
@
'&retorno'
@
~
undefined
@
'&retorno'
@
~
x
&
x
arguments
@
0
[@]
=
^
y
&
y
arguments
@
1
[@]
=
^
x
@
y
@
+
'&retorno'
@
~
undefined
@
'&retorno'
@
~
x
&
x
arguments
@
0
[@]
=
^
2
x
@
*
'&retorno'
@
~
undefined
@
'&retorno'
@
~
x
&
x
arguments
@
0
[@]
=
^
x
@
1
+
'&retorno'
@
~
undefined
@
'&retorno'
@
~
f
&
f
arguments
@
0
[@]
=
^
x
&
x
arguments
@
1
[@]
=
^
x
@
1
f
@
$
'&retorno'
@
~
undefined
@
'&retorno'
@
~
af
&
af
arguments
@
0
[@]
=
^
x
&
x
arguments
@
1
[@]
=
^
af
@
{}
'&funcao'
373
[<=]
x
@
3
reduce
@
$
'&retorno'
@
~
undefined
@
'&retorno'
@
~
